{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["type SetOtpTextForIndex = {\n  type: 'setOtpTextForIndex';\n  payload: { index: number; text: string };\n};\ntype SetOtpCode = {\n  type: 'setOtpCode';\n  payload: { numberOfInputs: number; code: string };\n};\ntype ClearOtp = { type: 'clearOtp'; payload: number };\ntype SetHandleChange = { type: 'setHandleChange'; payload: any };\ntype SetHasKeySupport = { type: 'setHasKeySupport'; payload: boolean };\n\nexport type ReducerState = {\n  otpCode: { [key: string]: string };\n  handleChange: (otpCode: string) => void;\n  hasKeySupport: boolean;\n};\n\nexport type ActionTypes = {\n  setHandleChange: 'setHandleChange';\n  setOtpTextForIndex: 'setOtpTextForIndex';\n  setOtpCode: 'setOtpCode';\n  clearOtp: 'clearOtp';\n  setHasKeySupport: 'setHasKeySupport';\n};\n\nexport type Actions =\n  | SetOtpTextForIndex\n  | SetOtpCode\n  | ClearOtp\n  | SetHandleChange\n  | SetHasKeySupport;\n\nexport type OtpInputsRef = {\n  reset: () => void;\n  focus: () => void;\n};\n\nexport type KeyEventType = {\n  action: number;\n  pressedKey: string;\n  keyCode: number;\n};\n\nexport type SupportedKeyboardType =\n  | 'default'\n  | 'email-address'\n  | 'phone-pad'\n  | 'visible-password'\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  | undefined;\n"],"mappings":""}