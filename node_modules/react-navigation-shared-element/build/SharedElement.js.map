{"version":3,"file":"SharedElement.js","sourceRoot":"","sources":["../src/SharedElement.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,aAAa,IAAI,gBAAgB,GAElC,MAAM,6BAA6B,CAAC;AAErC,OAAO,yBAAyB,MAAM,6BAA6B,CAAC;AASpE,MAAM,aAAc,SAAQ,KAAK,CAAC,SAA6B;IACrD,IAAI,GAA6B,IAAI,CAAC;IACtC,QAAQ,GAAW,EAAE,CAAC;IACtB,SAAS,GAAkC,IAAI,CAAC;IAExD,YAAY,KAAyB;QACnC,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,EAAE,CAAC;IAC3B,CAAC;IAED,MAAM;QACJ,MAAM,EACJ,EAAE,EAAE,uDAAuD;QAC3D,GAAG,UAAU,EACd,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,OAAO,CACL,oBAAC,yBAAyB,CAAC,QAAQ,QAChC,CAAC,SAAS,EAAE,EAAE;YACb;;;gBAGI;YACJ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,OAAO,oBAAC,gBAAgB,OAAK,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,SAAS,GAAI,CAAC;QACtE,CAAC,CACkC,CACtC,CAAC;IACJ,CAAC;IAED,kBAAkB;QAChB,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,IAAI,IAAI,CAAC,QAAQ,KAAK,EAAE,EAAE;YACxB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE;gBAChD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aACrD;YACD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE;gBAChD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;aAClD;SACF;IACH,CAAC;IAEO,SAAS,GAAG,CAAC,IAA8B,EAAE,EAAE;QACrD,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE;YACtB,OAAO;SACR;QACD,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;YAChD,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SACrD;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;YAChD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;SAClD;QACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC,CAAC;CACH;AAED,eAAe,aAAa,CAAC","sourcesContent":["import * as React from \"react\";\nimport {\n  SharedElement as RawSharedElement,\n  SharedElementProps as RawSharedElementProps,\n} from \"react-native-shared-element\";\n\nimport SharedElementSceneContext from \"./SharedElementSceneContext\";\nimport SharedElementSceneData from \"./SharedElementSceneData\";\nimport { SharedElementNode } from \"./types\";\n// import invariant from '../utils/invariant';\n\nexport type SharedElementProps = Omit<RawSharedElementProps, \"onNode\"> & {\n  id: string;\n};\n\nclass SharedElement extends React.Component<SharedElementProps> {\n  private node: SharedElementNode | null = null;\n  private sharedId: string = \"\";\n  private sceneData: SharedElementSceneData | null = null;\n\n  constructor(props: SharedElementProps) {\n    super(props);\n    this.sharedId = props.id;\n  }\n\n  render() {\n    const {\n      id, //eslint-disable-line @typescript-eslint/no-unused-vars\n      ...otherProps\n    } = this.props;\n    return (\n      <SharedElementSceneContext.Consumer>\n        {(sceneData) => {\n          /*invariant(\n            sceneData != null,\n            'The SharedElementSceneContext is not set, did you forget to wrap your scene component with `createSharedElementScene(..)`?'\n          );*/\n          this.sceneData = sceneData;\n          return <RawSharedElement {...otherProps} onNode={this.onSetNode} />;\n        }}\n      </SharedElementSceneContext.Consumer>\n    );\n  }\n\n  componentDidUpdate() {\n    const { id } = this.props;\n    if (this.sharedId !== id) {\n      if (this.sceneData && this.sharedId && this.node) {\n        this.sceneData.removeNode(this.sharedId, this.node);\n      }\n      this.sharedId = id;\n      if (this.sceneData && this.sharedId && this.node) {\n        this.sceneData.addNode(this.sharedId, this.node);\n      }\n    }\n  }\n\n  private onSetNode = (node: SharedElementNode | null) => {\n    if (this.node === node) {\n      return;\n    }\n    if (this.sceneData && this.node && this.sharedId) {\n      this.sceneData.removeNode(this.sharedId, this.node);\n    }\n    this.node = node;\n    if (this.sceneData && this.node && this.sharedId) {\n      this.sceneData.addNode(this.sharedId, this.node);\n    }\n    this.node = node;\n  };\n}\n\nexport default SharedElement;\n"]}