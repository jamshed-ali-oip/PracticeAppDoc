{"version":3,"file":"SharedElementFocusEvents.js","sourceRoot":"","sources":["../src/SharedElementFocusEvents.tsx"],"names":[],"mappings":"AAAA,OAAO,EACL,iBAAiB,GAElB,MAAM,0BAA0B,CAAC;AAClC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B;;;;;;GAMG;AACH,MAAM,UAAU,2BAA2B,CAEzC,EACA,KAAK,EACL,OAAO,GAIR;IACC,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;IACvD,MAAM,iBAAiB,GAAG,KAAK,CAAC,MAAM,EAAsB,CAAC;IAE7D,MAAM,iBAAiB,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;IAExD,uFAAuF;IACvF,6EAA6E;IAC7E,KAAK,CAAC,eAAe,CACnB,GAAG,EAAE,CACH,UAAU,EAAE,WAAW,CAAC,OAAO,EAAE,GAAG,EAAE;QACpC,iBAAiB,CAAC,OAAO,GAAG,iBAAiB,CAAC;QAC9C,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;IAC3C,CAAC,CAAC,EACJ,CAAC,iBAAiB,EAAE,OAAO,EAAE,UAAU,CAAC,CACzC,CAAC;IAEF,KAAK,CAAC,eAAe,CACnB,GAAG,EAAE,CACH,UAAU,EAAE,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE;QACnC,iBAAiB,CAAC,OAAO,GAAG,SAAS,CAAC;QACtC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;IAC1C,CAAC,CAAC,EACJ,CAAC,iBAAiB,EAAE,OAAO,EAAE,UAAU,CAAC,CACzC,CAAC;IAEF,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE;QACzB,MAAM,cAAc,GAAG,iBAAiB,CAAC,OAAO,CAAC;QAEjD,iBAAiB,CAAC,OAAO,GAAG,iBAAiB,CAAC;QAE9C,qDAAqD;QACrD,iFAAiF;QACjF,IAAI,cAAc,KAAK,SAAS,IAAI,CAAC,UAAU,EAAE;YAC/C,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;SAC1C;QAED,mFAAmF;QACnF,wFAAwF;QACxF,IACE,cAAc,KAAK,iBAAiB;YACpC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAC7C;YACA,OAAO;SACR;QAED,IAAI,cAAc,KAAK,SAAS,EAAE;YAChC,uCAAuC;YACvC,OAAO;SACR;QAED,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;QACrC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;IAC3C,CAAC,EAAE,CAAC,iBAAiB,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;AAC/C,CAAC","sourcesContent":["import {\n  NavigationContext,\n  StackNavigationState,\n} from \"@react-navigation/native\";\nimport * as React from \"react\";\n\nimport { EventEmitter } from \"./utils/EventEmitter\";\n\n/**\n * A variation of useFocusEvents that uses a custom emitter\n * and emits events using useLayoutEffect instead of useEffect.\n * This enables shared element to respond to focus events in\n * a timely manner.\n * https://github.com/react-navigation/react-navigation/blob/master/packages/core/src/useFocusEvents.tsx\n */\nexport function useSharedElementFocusEvents<\n  ParamList extends Record<string, object | undefined>\n>({\n  state,\n  emitter,\n}: {\n  state: StackNavigationState<ParamList>;\n  emitter: EventEmitter;\n}) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useLayoutEffect(\n    () =>\n      navigation?.addListener(\"focus\", () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit(\"focus\", currentFocusedKey);\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useLayoutEffect(\n    () =>\n      navigation?.addListener(\"blur\", () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit(\"blur\", currentFocusedKey);\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useLayoutEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit(\"focus\", currentFocusedKey);\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit(\"blur\", lastFocusedKey);\n    emitter.emit(\"focus\", currentFocusedKey);\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]}