{"version":3,"file":"SharedElementSceneData.js","sourceRoot":"","sources":["../src/SharedElementSceneData.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  SharedElementNode,\n  SharedElementEventSubscription,\n  SharedElementAnimatedValue,\n  SharedElementRoute,\n  SharedElementSceneComponent,\n  SharedElementsComponentConfig,\n} from \"./types\";\n\nexport type SharedElementSceneUpdateHandlerEventType =\n  | \"ancestor\"\n  | \"add\"\n  | \"remove\";\n\nexport type SharedElementSceneUpdateHandler = (\n  eventType: SharedElementSceneUpdateHandlerEventType,\n  node: SharedElementNode | undefined,\n  id: string\n) => any;\n\nconst INVERT_OPTIONS = {\n  inputRange: [0, 1],\n  outputRange: [1, 0],\n};\n\nexport type SharedElementSceneEventType =\n  | \"willFocus\"\n  | \"didFocus\"\n  | \"willBlur\"\n  | \"didBlur\";\n\nexport default class SharedElementSceneData {\n  private updateSubscribers = new Set<SharedElementSceneUpdateHandler>();\n  private ancestorNode?: SharedElementNode = undefined;\n  private nodes: {\n    [key: string]: SharedElementNode;\n  } = {};\n  private animationContextValue: any;\n  public readonly getSharedElements: () => SharedElementsComponentConfig | void;\n  public readonly name: string;\n  public readonly navigatorId: string;\n  public readonly nestingDepth: number;\n  public readonly debug: boolean;\n  public readonly route: SharedElementRoute;\n\n  constructor(\n    Component: SharedElementSceneComponent,\n    getSharedElements: () => SharedElementsComponentConfig | void,\n    route: SharedElementRoute,\n    navigatorId: string,\n    nestingDepth: number,\n    debug: boolean\n  ) {\n    this.getSharedElements = getSharedElements;\n    this.route = route;\n    this.navigatorId = navigatorId;\n    this.nestingDepth = nestingDepth;\n    this.debug = debug;\n    this.name =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor ? Component.constructor.name : undefined) ||\n      \"\";\n  }\n\n  public updateRoute(route: SharedElementRoute) {\n    if (route.key !== this.route.key) {\n      throw new Error(\n        \"SharedElementNavigation: Integrity error, route key should never change\"\n      );\n    }\n    // @ts-ignore\n    this.route = route;\n  }\n\n  setAnimimationContextValue(value: any) {\n    this.animationContextValue = value;\n  }\n\n  getAnimValue(closing: boolean): SharedElementAnimatedValue | undefined {\n    const { animationContextValue } = this;\n    if (!animationContextValue) return;\n    const { progress } = animationContextValue.current;\n    return closing ? progress.interpolate(INVERT_OPTIONS) : progress;\n  }\n\n  getAncestor(): SharedElementNode | undefined {\n    return this.ancestorNode;\n  }\n\n  setAncestor(ancestorNode: SharedElementNode | null) {\n    // console.log('SharedElementSceneData.setAncestor');\n    if (this.ancestorNode === ancestorNode) return;\n    this.ancestorNode = ancestorNode || undefined;\n    this.emitUpdateEvent(\"ancestor\", this.ancestorNode, \"\");\n  }\n\n  addNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.addNode: ', id);\n    this.nodes[id] = node;\n    this.emitUpdateEvent(\"add\", node, id);\n  }\n\n  removeNode(id: string, node: SharedElementNode): void {\n    // console.log('SharedElementSceneData.removeNode: ', id);\n    delete this.nodes[id];\n    this.emitUpdateEvent(\"remove\", node, id);\n  }\n\n  getNode(id: string): SharedElementNode | undefined {\n    return this.nodes[id];\n  }\n\n  addUpdateListener(\n    handler: SharedElementSceneUpdateHandler\n  ): SharedElementEventSubscription {\n    this.updateSubscribers.add(handler);\n    return () => this.updateSubscribers.delete(handler);\n  }\n\n  private emitUpdateEvent(\n    eventType: SharedElementSceneUpdateHandlerEventType,\n    node: SharedElementNode | undefined,\n    id: string\n  ): void {\n    this.updateSubscribers.forEach((handler) => handler(eventType, node, id));\n  }\n}\n"]}