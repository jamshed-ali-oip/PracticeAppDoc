{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/v4/types.ts"],"names":[],"mappings":"","sourcesContent":["export type Route = {\n  key: string;\n  routeName: string;\n};\n\nexport type NavigationEventName =\n  | \"willFocus\"\n  | \"didFocus\"\n  | \"willBlur\"\n  | \"didBlur\";\n\nexport type NavigationState = {\n  key: string;\n  index: number;\n  routes: Route[];\n  routeName: string;\n  transitions: {\n    pushing: string[];\n    popping: string[];\n  };\n  params?: { [key: string]: unknown };\n};\n\nexport type NavigationProp<RouteName = string, Params = object> = {\n  navigate(routeName: RouteName): void;\n  goBack(): void;\n  goBack(key: string | null): void;\n  addListener: (\n    event: NavigationEventName,\n    callback: () => void\n  ) => { remove: () => void };\n  isFocused(): boolean;\n  state: NavigationState;\n  setParams(params: Params): void;\n  getParam(): Params;\n  dispatch(action: { type: string }): void;\n  isFirstRouteInParent(): boolean;\n  dangerouslyGetParent(): NavigationProp | undefined;\n};\n"]}